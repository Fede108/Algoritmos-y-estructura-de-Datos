/*#include <string>
#include <iostream>
#include <sstream>
#include <fstream>
#include <vector>

#include "../inc/Cola.h"
#include "../inc/Pila.h"

using namespace std;

class Json
{
private:
    Pila<char> *p ;
    string comando;
    vector<string>* expresion_json; 
public:
    Json(/* args */);
    ~Json();
    void leer_archivo(string archivo);
    void lector_linea(int indice, string comando);
    void analizador_linea();
};

Json::Json(/* args */)
{
 p = new Pila<char>;
}

Json::~Json()
{
}

void Json ::  leer_archivo(string a){
    ifstream archivo(a);
    expresion_json = new vector<string>();
    bool linea_nueva = false;
    if (archivo.is_open()) {
        char c;
        while (archivo.get(c)) { 
            if(c == ',') { linea_nueva = !linea_nueva;}
            if (linea_nueva)
            {
               lector_linea(1,comando);
               comando = "";     
               linea_nueva = false;
            }  
              comando += c;           
        }
        archivo.close();
    } else {
        cerr << "No se pudo abrir el archivo." << endl;
        return ; 
    }
}

void Json::lector_linea(int indice, string comando){
if(comando.length() == 0) return;
string linea = "";
     for (int i = 0; i < comando.length(); i++)
    {
        if (comando[i] == '\n' || comando[i] == ' ' || comando[i] == '\t' ){}
        else{
            linea += comando[i]; 
        }   
    }
    expresion_json->push_back(linea);
    return;
}

void Json::analizador_linea(){
    if( expresion_json->front()[0] == '{' ) p->apilar('{');
    if( expresion_json->back()[expresion_json->back().length() - 1] == '}' ){ p->desapilar();}

    for (int i = 1; i < expresion_json->size() - 1 ;i++)
    {
        llave_valor->validar(expresion_json[i]);
        llave_lista->validar(expresion_json[i]);      
    }   
    
    
}*/
